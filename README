Being able to automatically filter out applications from unqualified applicants can save busy hiring managers a lot of time.  They only need to spend time looking at applicants who meet their minimum qualifications.  Why waste time reading through delivery driver applications from people who don’t have a vehicle if you require drivers to use their own vehicle?

This program determines whether a job application meets a set of minimum qualifications.  The job application is a list of questions, each of which has a question id and an answer.  The qualifications is a list of question ids, each associated with a list of acceptable answers.  If an application fails to answer any one of these questions with an acceptable answer, the application is rejected.  Otherwise the application is accepted.  The employer is able to view only the accepted applications.

=============
Input:

    Lists of Questions with an acceptable answer for each question:

        [ { Id: "id1", Question: "string", "Answer": "string" }, { Id: "id2", Question: "string", "Answer": "string" }, … ]

    Job applications where each application is a JSON document conforming to this design:

        { Name: "string",  Questions: [ {  Id: "id10", Answer: "string" }, {  Id: "id20", Answer: "string" }, … ] }
==============

    The program decides to accept or reject each application.

    Accepted applications answer all questions correctly.

    Accepted applications are shown to the employer.

    Unaccepted applications are not shown to the employer.

As with any project, there are some missing requirements or specifications:

    The product owner does not know what the questions or answers are at this time.

    There is no UI designer.

    There is no database designer.
    
main.py: 'main' script, which is mostly testing functionality of the program
lib.by: classes used for processing application and saving "employer's" questionnaire
dynamoConn.py: functions used to connect to DynamoDB

Briefly about the program:
1. Creates an instance of questionnaire and checks its validity, then it can be written into the database
2. Creates an instance of application
3. Then Match instance detects passed/not passed
4. The results are simply written into a file (a database can be used instead; the only information I save is names, so I decided to save to a file for now)

Note. If you'd like to run it on your own:
1. Create a table called 'Questions' with primary key 'list_id' (Number) in DynamoDB(AWS)
2. In order to write into the database you need to uncomment calls to 'put_list_item' function in main.py. After you wrote the questionnaires into the database I recommend commenting the calls to 'put_list_item' again to avoid duplicates.
3. Then clone the repository and run it with your own aws credentials
